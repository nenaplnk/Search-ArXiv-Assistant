from vllm import LLM, SamplingParams
from sentence_transformers import CrossEncoder
import arxiv
import textwrap
from datetime import datetime
from termcolor import colored

class ArXivAssistant:

    def __init__(self, model, sampling_params):
        self.reranker = CrossEncoder("cross-encoder/ms-marco-MiniLM-L-6-v2")
        self.client = arxiv.Client()
        self.model = model
        self.sampling_params = sampling_params
        
    def optimize_query(self, user_query: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è arXiv —Å –ø–æ–º–æ—â—å—é vLLM"""
        prompt = f"""
        Make a bunch of keyword by the query.
        Use only keywords, which are really in articles.
        Tag your answer with [ANSWER] and [/ANSWER]
        Query: Machine learning
        [ANSWER] machine learning, AI, artificial intelligence, deep learning, 
        neural networks, algorithms, data science, supervised learning, 
        unsupervised learning, reinforcement learning, classification, 
        regression, clustering, natural language processing, NLP, 
        computer vision [/ANSWER]
        Query: Biology
        [ANSWER] biology, cell biology, molecular biology, genetics, DNA, RNA, 
        proteins, enzymes, metabolism, photosynthesis, cellular respiration, 
        mitosis, meiosis, chromosomes, genes, mutations, evolution, 
        natural selection, biodiversity, taxonomy, ecology, ecosystems, 
        food webs, biomes, microbiology, bacteria, viruses, fungi, immunology, 
        antibodies, vaccines, physiology, anatomy, zoology, botany, 
        plant biology, animal behavior, neuroscience, endocrinology, 
        hormones, homeostasis, biochemistry, carbohydrates, lipids [/ANSWER]
        Query: {user_query}
        [ANSWER]
        """
        outputs = self.model.generate(prompt, self.sampling_params)
        return " ".join([i.replace(",", "") for i in outputs[0].outputs[0].text.strip().split()])

    def search_arxiv(self, query: str, top_k: int = 5) -> list:
        """–ü–æ–∏—Å–∫ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π"""
        search = arxiv.Search(
            query=f"all:{query}",
            max_results=20,
            sort_by=arxiv.SortCriterion.Relevance
        )
        
        papers = list(self.client.results(search))
        # –†–∞–Ω–∂–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é CrossEncoder
        paper_info = [f"{p.title} {p.summary}" for p in papers]
        scores = self.reranker.predict([(query, text) for text in paper_info])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        ranked_papers = [p for _, p in sorted(zip(scores, papers), reverse=True)]
        return ranked_papers[:top_k]

    def format_results(self, papers: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ vLLM"""
        papers_str = "\n\n".join( 
            f"Title: {p.title}\n\nSummary: {p.summary}\n\n----------------------------------------------------" 
            for p in papers 
        )
        return papers_str

    def run(self):
        print("–ù–∞—É—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å vLLM (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'q')")
        while True:
            user_query = input("\nüí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
            if user_query.lower() in ('q', 'quit'):
                break

            try:
                # 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
                optimized_query = self.optimize_query(user_query)
                print(f"üîç –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {optimized_query}")

                # 2. –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
                print("‚åõ –ò—â—É —Å—Ç–∞—Ç—å–∏ –Ω–∞ arXiv...")
                papers = self.search_arxiv(optimized_query)
                # 3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                if papers:
                    print("\nüìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    formatted = self.format_results(papers)
                    print(formatted)
                else:
                    print("‚ùå –°—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")